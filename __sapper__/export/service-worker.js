!function(){"use strict";const n=["client/index.374d0477.js","client/_content_layout.7aa41619.js","client/index.6dc17a2d.js","client/contact-me.913704c9.js","client/_layout.be3b1759.js","client/about-me.ffda2d83.js","client/index.0e585a1c.js","client/_layout.1bbce9d6.js","client/[slug].d5d7bffa.js","client/[slug].2e960293.js","client/index.28741578.js","client/client.bec1abee.js"].concat(["service-worker-index.html",".DS_Store","_redirects","assets/.DS_Store","assets/images/.DS_Store","assets/images/bg-home-v2.jpg","assets/images/bg-home.jpg","assets/svg/hello.svg","assets/svg/jk.svg","assets/svg/justinekizhakkinedath.svg","assets/svg/menu.svg","assets/svg/right-arrow.svg","assets/svg/search.svg","bg.jpg","global.css","icons/android-icon-144x144.png","icons/android-icon-192x192.png","icons/android-icon-36x36.png","icons/android-icon-48x48.png","icons/android-icon-72x72.png","icons/android-icon-96x96.png","icons/apple-icon-114x114.png","icons/apple-icon-120x120.png","icons/apple-icon-144x144.png","icons/apple-icon-152x152.png","icons/apple-icon-180x180.png","icons/apple-icon-57x57.png","icons/apple-icon-60x60.png","icons/apple-icon-72x72.png","icons/apple-icon-76x76.png","icons/apple-icon-precomposed.png","icons/apple-icon.png","icons/browserconfig.xml","icons/favicon-16x16.png","icons/favicon-32x32.png","icons/favicon-500x500.png","icons/favicon-96x96.png","icons/favicon.ico","icons/manifest.json","icons/ms-icon-144x144.png","icons/ms-icon-150x150.png","icons/ms-icon-310x310.png","icons/ms-icon-70x70.png","jost.css","manifest.json","resume.pdf"]),s=new Set(n);self.addEventListener("install",s=>{s.waitUntil(caches.open("cache1572873446226").then(s=>s.addAll(n)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",n=>{n.waitUntil(caches.keys().then(async n=>{for(const s of n)"cache1572873446226"!==s&&await caches.delete(s);self.clients.claim()}))}),self.addEventListener("fetch",n=>{if("GET"!==n.request.method||n.request.headers.has("range"))return;const e=new URL(n.request.url);e.protocol.startsWith("http")&&(e.hostname===self.location.hostname&&e.port!==self.location.port||(e.host===self.location.host&&s.has(e.pathname)?n.respondWith(caches.match(n.request)):"only-if-cached"!==n.request.cache&&n.respondWith(caches.open("offline1572873446226").then(async s=>{try{const e=await fetch(n.request);return s.put(n.request,e.clone()),e}catch(e){const c=await s.match(n.request);if(c)return c;throw e}}))))})}();
